.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Validator 3"
.TH Mojolicious::Validator 3 "2015-06-10" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Validator \- Validate parameter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Validator;
\&
\&  my $validator  = Mojolicious::Validator\->new;
\&  my $validation = $validator\->validation;
\&  $validation\->input({foo => \*(Aqbar\*(Aq});
\&  $validation\->required(\*(Aqfoo\*(Aq)\->like(qr/ar$/);
\&  say $validation\->param(\*(Aqfoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Validator validates parameters for Mojolicious.
.SH "CHECKS"
.IX Header "CHECKS"
These validation checks are available by default.
.SS "equal_to"
.IX Subsection "equal_to"
.Vb 1
\&  $validation\->equal_to(\*(Aqfoo\*(Aq);
.Ve
.PP
Value needs to be equal to the value of another field.
.SS "in"
.IX Subsection "in"
.Vb 1
\&  $validation\->in(qw(foo bar baz));
.Ve
.PP
Value needs to match one of the values in the list.
.SS "like"
.IX Subsection "like"
.Vb 1
\&  $validation\->like(qr/^[A\-Z]/);
.Ve
.PP
Value needs to match the regular expression.
.SS "size"
.IX Subsection "size"
.Vb 1
\&  $validation\->size(2, 5);
.Ve
.PP
Value length in characters needs to be between these two values.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Validator implements the following attributes.
.SS "checks"
.IX Subsection "checks"
.Vb 2
\&  my $checks = $validator\->checks;
\&  $validator = $validator\->checks({size => sub {...}});
.Ve
.PP
Registered validation checks, by default only \*(L"equal_to\*(R", \*(L"in\*(R",
\&\*(L"like\*(R" and \*(L"size\*(R" are already defined.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Validator inherits all methods from Mojo::Base and
implements the following new ones.
.SS "add_check"
.IX Subsection "add_check"
.Vb 1
\&  $validator = $validator\->add_check(size => sub {...});
.Ve
.PP
Register a new validation check.
.SS "validation"
.IX Subsection "validation"
.Vb 1
\&  my $validation = $validator\->validation;
.Ve
.PP
Build Mojolicious::Validator::Validation object to perform validations.
.PP
.Vb 4
\&  my $validation = $validator\->validation;
\&  $validation\->input({foo => \*(Aqbar\*(Aq});
\&  $validation\->required(\*(Aqfoo\*(Aq)\->size(1, 5);
\&  say $validation\->param(\*(Aqfoo\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
