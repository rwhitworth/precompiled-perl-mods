.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Guides::Contributing 3"
.TH Mojolicious::Guides::Contributing 3 "2015-06-10" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Guides::Contributing \- Contributing to Mojolicious
.SH "OVERVIEW"
.IX Header "OVERVIEW"
There are many ways to contribute to Mojolicious, this guide will show you a
few of them.
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
We use the GitHub issue tracker <https://github.com/kraih/mojo/issues>, so
you'll need to create a (free) GitHub account to be able to submit issues,
comments and pull requests.
.PP
First of all, make sure you are using the latest version of Mojolicious, it
is quite likely that your bug has already been fixed. If that doesn't help,
take a look at the list of currently open issues, perhaps it has already been
reported by someone else and you can just add a comment confirming it.
.PP
If it hasn't been reported yet, try to prepare a test case demonstrating the
bug, you are not expected to fix it yourself, but you'll have to make sure the
developers can replicate your problem. Sending in your whole application
generally does more harm than good, the \f(CW\*(C`t\*(C'\fR directory of this distribution has
many good examples for how to do it right. Writing a test is usually the
hardest part of fixing a bug, so the better your test case the faster it can be
fixed. ;)
.PP
And don't forget to add a descriptive title and text when you create a new
issue.
.SS "Reporting security issues"
.IX Subsection "Reporting security issues"
Please report security issues directly to the \s-1CPAN\s0 email address of the
pumpkin-holder, which is currently \f(CW\*(C`sri@cpan.org\*(C'\fR, and give us a few days to
develop and release a proper fix.
.SH "RESOLVING ISSUES"
.IX Header "RESOLVING ISSUES"
There are many ways in which you can help us resolve existing issues on the
GitHub issue tracker <https://github.com/kraih/mojo/issues>.
.PP
Can you replicate the problem on your computer? Add a comment saying that
you're seeing the same. Perhaps you can provide additional information that
will make it easier for others to replicate the problem, maybe even contribute
a better test case.
.PP
And for all code contributions we very much appreciate additional testing and
code review, just add a comment to show your approval or to point out flaws
that need to be addressed.
.SH "CONTRIBUTING DOCUMENTATION"
.IX Header "CONTRIBUTING DOCUMENTATION"
One of the easiest ways to contribute to Mojolicious is through
documentation improvements. While the Mojolicious::Guides are carefully
curated by the core team, everybody with a (free) GitHub account can make
changes and add new information to the
Mojolicious wiki <http://github.com/kraih/mojo/wiki>. Pull requests with
additions or changes to the documentation included in the Mojolicious
distribution follow the same rules as code contributions.
.SH "CONTRIBUTING CODE"
.IX Header "CONTRIBUTING CODE"
All code contributions should be sent as
GitHub pull requests <https://help.github.com/articles/using-pull-requests>.
.PP
An expressive title and detailed description are invaluable during the review
process, which usually ends when members of the community have voiced their
opinions and the core team voted for or against a change. All code changes
should emulate the style of the surrounding code, include tests that fail
without them, and update relevant documentation.
.PP
While the Mojolicious distribution covers a wide range of features, we are
rather conservative when it comes to adding new ones. So if your contribution
is not a bug fix, you can drastically increase its chances of getting accepted
by discussing it in advance on the
mailing-list <http://groups.google.com/group/mojolicious> or the official \s-1IRC\s0
channel \f(CW\*(C`#mojo\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR.
.PP
The following mission statement and rules are the foundation of all Mojo and
Mojolicious development. Please make sure that your contribution aligns well
with them before sending a pull request.
.SS "Mission statement"
.IX Subsection "Mission statement"
Mojo is a runtime environment for Perl real-time web frameworks. It provides
all the basic tools and helpers needed to write simple web applications and
higher level web frameworks, such as Mojolicious.
.PP
All components should be reusable in other projects, and in a UNIXish way only
loosely coupled.
.PP
Especially for people new to Perl it should be as easy as possible to install
Mojolicious and get started. Writing web applications can be one of the most
fun ways to learn a language!
.PP
For developers of other web frameworks, it should be possible to reuse all the
infrastructure and just consider the higher levels of the Mojolicious
distribution an example application.
.SS "Rules"
.IX Subsection "Rules"
.RS 2
Web development should be easy and fun, this is what we optimize for.
.Sp
The web is a moving target, to stay relevant we have to stay in motion too.
.Sp
Keep it simple, no magic unless absolutely necessary.
.Sp
The installation process should be as fast and painless as possible. (Less than
a minute on most common hardware is a good rule of thumb)
.Sp
The addition and modification of features is decided by majority vote or the
pumpkin-holder.
.Sp
Any core developer may nominate a new one, who must then be accepted by a 2/3
majority vote.
.Sp
The pumpkin-holder has veto rights and may select their successor.
.Sp
It's not a feature without a test and documentation.
.Sp
A feature is only needed when the majority of the user base benefits from it.
.Sp
Features may only be changed in a major release, to fix a serious security
issue, or after being deprecated for at least 3 months.
.Sp
Refactoring and deprecations should be avoided if no important feature depends
on it.
.Sp
New features can be marked as experimental to be excluded from deprecation
policies.
.Sp
A major release is signaled by a new major version number and a unique code
name based on a Unicode character.
.Sp
Only add dependencies if absolutely necessary and make them optional if
possible.
.Sp
Domain specific languages should be avoided in favor of Perl-ish solutions.
.Sp
No inline \s-1POD.\s0
.Sp
Documentation belongs to the guides, module \s-1POD\s0 is just an \s-1API\s0 reference.
.Sp
The main focus of the included documentation should be on examples, no walls of
text. (An example for every one or two sentences is a good rule of thumb)
.Sp
Everything should be ordered alphabetically if possible, or at least be
consistent if not.
.Sp
The master source code repository should always be kept in a stable state, use
feature branches for actual development.
.Sp
Code has to be run through Perl::Tidy with the included
\&.perltidyrc <https://github.com/kraih/mojo/blob/master/.perltidyrc>, and
everything should look like it was written by a single person.
.Sp
Functions and methods should be as short as possible, no spaghetti code.
.Sp
Comments should be correctly capitalized, and funny if possible, punctuation is
optional if it doesn't increase readability.
.Sp
No names outside of \f(CW\*(C`Mojolicious.pm\*(C'\fR.
.Sp
No Elitism.
.Sp
Peace!
.RE
.SH "MORE"
.IX Header "MORE"
You can continue with Mojolicious::Guides now or take a look at the
Mojolicious wiki <http://github.com/kraih/mojo/wiki>, which contains a lot
more documentation and examples by many different authors.
.SH "SUPPORT"
.IX Header "SUPPORT"
If you have any questions the documentation might not yet answer, don't
hesitate to ask on the
mailing-list <http://groups.google.com/group/mojolicious> or the official \s-1IRC\s0
channel \f(CW\*(C`#mojo\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR.
