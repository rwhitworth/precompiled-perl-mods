.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Serializer 3"
.TH Dancer::Serializer 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Serializer \- serializer wrapper for Dancer
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is the wrapper that provides support for different
serializers.
.SH "USAGE"
.IX Header "USAGE"
.SS "Configuration"
.IX Subsection "Configuration"
The \fBserializer\fR configuration variable tells Dancer which serializer to use
to deserialize request and serialize response.
.PP
You change it either in your config.yml file:
.PP
.Vb 1
\&    serializer: "YAML"
.Ve
.PP
Or in the application code:
.PP
.Vb 2
\&    # setting JSON as the default serializer
\&    set serializer => \*(AqJSON\*(Aq;
.Ve
.PP
In your routes you can access parameters just like any route.
.PP
When in a route you return a Perl data structure, it will be
serialized automatically to the respective serialized engine (for
instance, \f(CW\*(C`JSON\*(C'\fR).
.PP
For \f(CW\*(C`PUT\*(C'\fR and \f(CW\*(C`POST\*(C'\fR methods you can access the \f(CW\*(C`request\->body\*(C'\fR as
a string, and you can unserialize it, if you really need to. If your
content type is recognized by the serializer, \f(CW\*(C`request\->body\*(C'\fR will be
unserialized automatically, and it will be available as a standard
parameter.
.PP
For instance, if you call
.PP
.Vb 1
\& curl \-X POST \-H \*(AqContent\-Type: application/json\*(Aq \-d \*(Aq{"id":"bar"}\*(Aq /foo
.Ve
.PP
your \f(CW\*(C`foo\*(C'\fR route can do something like:
.PP
.Vb 4
\&  post "/foo" => {
\&     my $id = param(\*(Aqid\*(Aq); # gets "bar"
\&     #  ...
\&  }
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
This module has been written by Alexis Sukrieh and Franck Cuny.
See the \s-1AUTHORS\s0 file that comes with this distribution for details.
.SH "LICENSE"
.IX Header "LICENSE"
This module is free software and is released under the same terms as Perl
itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Dancer for details about the complete framework.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
