.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Serializer::JSONP 3"
.TH Dancer::Serializer::JSONP 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Serializer::JSONP \- serializer for handling JSONP data
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a subclass of Dancer::Serializer::JSON with support for \s-1JSONP\s0.
.PP
In order to use this engine, use the template setting:
.PP
.Vb 1
\&    serializer: JSONP
.Ve
.PP
This can be done in your config.yml file or directly in your app code with the
\&\fBset\fR keyword. This serializer will \fBnot\fR be used when the serializer is set
to \fBmutable\fR.
.PP
All configuration options mentioned in Dancer::Serializer::JSON apply here,
too.
.SH "METHODS"
.IX Header "METHODS"
.SS "serialize"
.IX Subsection "serialize"
Serialize a data structure to a \s-1JSON\s0 structure with surrounding javascript
callback method. The name of the callback method is obtained from the request
parameter \fIcallback\fR.
.SS "deserialize"
.IX Subsection "deserialize"
See Dancer::Serializer::JSON#deserialize.
.SS "content_type"
.IX Subsection "content_type"
Return 'application/javascript'
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dancer::Plugin::CORS is a modern alternative to \s-1JSONP\s0, but with limited
browser support. Today, \s-1JSONP\s0 can be a serious fallback solution when \s-1CORS\s0 is
not supported by a browser.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Zurborg, \f(CW\*(C`<zurborg at cpan.org>\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
