.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Object::Singleton 3"
.TH Dancer::Object::Singleton 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Object::Singleton \- Singleton base class for Dancer
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package My::Dancer::Extension;
\&
\&    use strict;
\&    use warnings;
\&    use base \*(AqDancer::Object::Singleton\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->attributes( qw/name value this that/ );
\&
\&    sub init {
\&        my ($class, $instance) = @_;
\&        # our initialization code, if we need one
\&    }
\&
\&    # .. later on ..
\&
\&    # returns the unique instance
\&    my $singleton_intance = My::Dancer::Extension\->instance();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer::Object::Singleton is meant to be used instead of Dancer::Object, if you
want your object to be a singleton, that is, a class that has only one instance
in the application.
.PP
It provides you with attributes and an initializer.
.SH "METHODS"
.IX Header "METHODS"
.SS "instance"
.IX Subsection "instance"
Returns the instance of the singleton. The instance is created only when
needed. The creation will call the \f(CW\*(C`init()\*(C'\fR method, which you should implement.
.SS "init"
.IX Subsection "init"
Exists but does nothing. This is so you won't have to write an initializer if
you don't want to. init receives the instance as argument.
.SS "get_attributes"
.IX Subsection "get_attributes"
Get the attributes of the specific class.
.SS "attributes"
.IX Subsection "attributes"
Generates attributes for whatever object is extending Dancer::Object and saves
them in an internal hashref so they can be later fetched using
\&\f(CW\*(C`get_attributes\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
