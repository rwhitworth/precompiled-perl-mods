.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "JSON::Tiny 3"
.TH JSON::Tiny 3 "2015-01-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::Tiny \- Minimalistic JSON. No dependencies.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use JSON::Tiny qw(decode_json encode_json);
\&
\&  my $bytes = encode_json {foo => [1, 2], bar => \*(Aqhello!\*(Aq, baz => \e1};
\&  my $hash  = decode_json $bytes;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
JSON::Tiny is a minimalistic standalone adaptation of Mojo::JSON, from
the Mojolicious framework. It is a single-source-file module with under 300
lines of code and core-only dependencies.
.PP
Features include transparent Unicode support, speed, small memory footprint,
and a minimal code base ideal for bundling or inlining. Along with
<Mojo:JSON>, it is among the fastest pure-Perl implementations of
\&\s-1RFC\s0 7159 <http://tools.ietf.org/html/rfc7159>.
.PP
JSON::Tiny supports normal Perl data types like scalar, array reference,
hash reference, and will try to call the \s-1TO_JSON\s0 method on blessed
references, or stringify them if it doesn't exist.
.PP
Differentiating between strings and numbers in Perl is hard; depending on how
it has been used, a scalar can be both at the same time. The string value has a
higher precedence unless both representations are equivalent.
.PP
.Vb 2
\&  [1, \-2, 3]     \-> [1, \-2, 3]
\&  {"foo": "bar"} \-> {foo => \*(Aqbar\*(Aq}
.Ve
.PP
Literal names will be translated to and from JSON::Tiny constants or a
similar native Perl value.
.PP
.Vb 3
\&  true  \-> JSON::Tiny\->true
\&  false \-> JSON::Tiny\->false
\&  null  \-> undef
.Ve
.PP
Scalar references will be used to generate Booleans, based on if their values
are true or false.
.PP
.Vb 2
\&  \e1 => true
\&  \e0 => false
.Ve
.PP
The two Unicode whitespace characters \f(CW\*(C`u2028\*(C'\fR and \f(CW\*(C`u2029\*(C'\fR will always be
escaped to make \s-1JSONP\s0 easier, and the character \f(CW\*(C`/\*(C'\fR to prevent \s-1XSS\s0 attacks.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
JSON::Tiny implements the following functions, which can be imported
individually.
.SS "decode_json"
.IX Subsection "decode_json"
.Vb 1
\&  my $value = decode_json $bytes;
.Ve
.PP
Decode \s-1JSON\s0 to Perl value and die if decoding fails.
.SS "encode_json"
.IX Subsection "encode_json"
.Vb 1
\&  my $bytes = encode_json {foo => \*(Aqbar\*(Aq};
.Ve
.PP
Encode Perl value to \s-1JSON\s0.
.SS "false"
.IX Subsection "false"
.Vb 1
\&  my $false = false;
.Ve
.PP
False value, used because Perl has no equivalent.
.SS "from_json"
.IX Subsection "from_json"
.Vb 1
\&  my $value = from_json $chars;
.Ve
.PP
Decode \s-1JSON\s0 text that is not \f(CW\*(C`UTF\-8\*(C'\fR encoded to Perl value and die if
decoding fails.
.SS "j"
.IX Subsection "j"
.Vb 3
\&  my $bytes = j [1, 2, 3];
\&  my $bytes = j {foo => \*(Aqbar\*(Aq};
\&  my $value = j $bytes;
.Ve
.PP
Encode Perl data structure (which may only be an array reference or hash
reference) or decode \s-1JSON\s0. An \f(CW\*(C`undef\*(C'\fR return value indicates a bare \f(CW\*(C`null\*(C'\fR.
Dies if decoding fails.
.SS "to_json"
.IX Subsection "to_json"
.Vb 1
\&  my $chars = to_json {i => \*(Aqâ™¥ Perl\*(Aq};
.Ve
.PP
Encode Perl value to \s-1JSON\s0 text without \f(CW\*(C`UTF\-8\*(C'\fR encoding it.
.SS "true"
.IX Subsection "true"
.Vb 1
\&  my $true = true;
.Ve
.PP
True value, used because Perl has no native equivalent.
.PP
\fIMore on Booleans\fR
.IX Subsection "More on Booleans"
.PP
A reference to a scalar (even if blessed) is encoded as a Boolean value unless
it has a \s-1TO_JSON\s0 method.
.PP
.Vb 1
\&  my $json = $j\->encode( { b => \e1, a => \e0 } ); # {"b":true,"a":false}
.Ve
.PP
Boolean false and true values returned when \s-1JSON\s0 is decoded are
JSON::Tiny::_Bool objects with overloaded stringification.
.PP
\&\fBAdvanced option\fR: Users requiring a plain old literal \f(CW0\fR or \f(CW1\fR, may set
\&\f(CW\*(C`$JSON::Tiny::FALSE = 0;\*(C'\fR and \f(CW\*(C`$JSON::Tiny::TRUE = 1;\*(C'\fR. Any value, including
blessed references will work. This must be set prior to calling a \s-1JSON\s0 decoding
function. Use \f(CW\*(C`local\*(C'\fR to limit scope.
.SH "Tiny"
.IX Header "Tiny"
JSON::Tiny compared with \s-1JSON::PP\s0 from the \s-1JSON\s0 distribution:
.IP "\(bu" 4
\&\s-1JSON::PP\s0 is configurable, but more complex. JSON::Tiny offers
sane defaults, and no configuration.
.IP "\(bu" 4
Download and install with \f(CW\*(C`cpanm\*(C'\fR: \s-1JSON::PP\s0, 5.2 seconds.
JSON::Tiny, 1.9 seconds.
.IP "\(bu" 4
Minimal Dependencies: Both \s-1JSON::PP\s0 and JSON::Tiny only use core
dependencies. JSON::Tiny requires Perl 5.8.4, while \s-1JSON::PP\s0 requires 5.6.
.IP "\(bu" 4
Simple Design: \s-1JSON\s0 has 2254 lines of code, six modules and five
files. Distribution: 85KB.
.Sp
JSON::Tiny has under 300 lines of code; an embeddable single-file module.
Distribution: 18KB.
.IP "\(bu" 4
\&\s-1JSON::PP\s0 has 42 functions and methods. JSON::Tiny has seven.
.IP "\(bu" 4
Performance:
.Sp
.Vb 3
\&             Rate   JSON_PP JSON_Tiny
\&  JSON_PP   304/s        \-\-      \-52%
\&  JSON_Tiny 636/s      109%        \-\-
.Ve
.Sp
\&\s-1JSON\s0 uses \s-1JSON::XS\s0 if it's available, in which case \s-1JSON\s0 wins.
See \f(CW\*(C`examples/json_bench.pl\*(C'\fR for benchmark code.
.Sp
JSON::Tiny's lightweight design reduces its startup time compared to the
\&\s-1JSON\s0 module. This may benefit frequently run applications like \s-1CGI\s0.
.IP "\(bu" 4
Light Memory Needs: Memory usage was tested with
<http://valgrind.org/valgrind> and Devel::MemoryTrace::Light by running
\&\f(CW\*(C`examples/json_pp.pl\*(C'\fR and \f(CW\*(C`examples/json_tiny.pl\*(C'\fR.
.Sp
.Vb 3
\&             valgrind  Devel::MemoryTrace::Light
\&  JSON::PP   5.1MB     3.7MB
\&  JSON::Tiny 4.5MB     2.6MB
.Ve
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
No configuration.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Perl 5.8.4 or newer. \fBPerl 5.10+ is recommended due to bugs in Perl 5.8's
regular expression engine.\fR
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
Incompatible with Exporter versions older than 5.59 (ie, predating Perl
5.8.4).
.SH "AUTHOR"
.IX Header "AUTHOR"
David Oswald, \f(CW\*(C`<davido at cpan.org>\*(C'\fR
.PP
Code and tests adapted from Mojo::JSON.
.SH "SUPPORT"
.IX Header "SUPPORT"
Direct support requests to the author. Direct bug reports to \s-1CPAN\s0's Request
Tracker (\s-1RT\s0).
.PP
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc JSON::Tiny
.Ve
.PP
You may look for additional information at:
.IP "\(bu" 4
Github: Development is hosted on Github at:
.Sp
http://www.github.com/daoswald/JSON\-Tiny <http://www.github.com/daoswald/JSON-Tiny>
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (bug reports)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=JSON\-Tiny <http://rt.cpan.org/NoAuth/Bugs.html?Dist=JSON-Tiny>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/JSON\-Tiny <http://annocpan.org/dist/JSON-Tiny>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/JSON\-Tiny <http://cpanratings.perl.org/d/JSON-Tiny>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/JSON\-Tiny/ <http://search.cpan.org/dist/JSON-Tiny/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Mojolicious team for its lightweight \s-1JSON\s0 implementation. This module was
adapted from Mojo::JSON because it is robust, minimal, and well tested.
Mojo::JSON's tests were also adapted to a dependency-free design.
.PP
Christian Hansen, whos GitHub Gist <https://gist.github.com/chansen/810296>
formed the basis for Mojo::JSON, and subsequently JSON::Tiny.
.PP
Randal Schwartz showed his pure-regexp \s-1JSON\s0 parser
(PerlMonks <http://perlmonks.org/?node_id=995856>) to Los Angeles Perl Mongers
(09/2012). He wasn't involved in JSON::Tiny, but exploring alternatives to his
solution led to this project.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012\-2014 David Oswald.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.PP
See <http://www.perlfoundation.org/artistic_license_2_0> for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::JSON, \s-1JSON\s0, \s-1RFC7159\s0 <http://tools.ietf.org/html/rfc7159>.
