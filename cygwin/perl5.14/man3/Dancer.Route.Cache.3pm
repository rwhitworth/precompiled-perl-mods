.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Route::Cache 3"
.TH Dancer::Route::Cache 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Route::Cache \- route caching mechanism for Dancer
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $cache = Dancer::Route::Cache\->new(
\&        path_limit => 300, # optional, defaults to 600 (routes to cache)
\&        size_limit => 5M,  # optional, defaults to 10M (10MB)
\&    );
\&
\&    # storing a path
\&    # /new/item/ is the path, $route is a compiled route
\&    $cache\->store_path( \*(Aqget\*(Aq, \*(Aq/new/item/\*(Aq, $route );
\&    my $cached_route = $cache\->route_from_path(\*(Aq/new/item/\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When Dancer first starts, it has to compile a regexp list of all the routes.
Then, on each request it goes over the compiled routes list and tries to compare
the requested path to a route.
.PP
A major drawback is that Dancer has to go over the matching on every request,
which (especially on CGI-based applications) can be very time consuming.
.PP
The caching mechanism allows one to cache some requests to specific routes (but
\&\fB\s-1NOT\s0\fR specific results) and run those routes on a specific path. This allows us
to speed up Dancer quite a lot.
.SH "METHODS/SUBROUTINES"
.IX Header "METHODS/SUBROUTINES"
.SS "new(@args)"
.IX Subsection "new(@args)"
Creates a new route cache object.
.PP
.Vb 4
\&    my $cache = Dancer::Route::Cache\->new(
\&        path_limit => 100,   # only 100 paths will be cached
\&        size_limit => \*(Aq30M\*(Aq, # max size for cache is 30MB
\&    );
.Ve
.PP
Please check the \f(CW\*(C`ATTRIBUTES\*(C'\fR section below to learn about the arguments for
\&\f(CW\*(C`new()\*(C'\fR.
.SS "route_from_path($path)"
.IX Subsection "route_from_path($path)"
Fetches the route from the path in the cache.
.ie n .SS "store_path( $method, $path => $route )"
.el .SS "store_path( \f(CW$method\fP, \f(CW$path\fP => \f(CW$route\fP )"
.IX Subsection "store_path( $method, $path => $route )"
Stores the route in the cache according to the path and \f(CW$method\fR.
.PP
For developers: the reason we're using an object for this and not directly using
the registry hash is because we need to enforce the limits.
.SS "parse_size($size)"
.IX Subsection "parse_size($size)"
Parses the size wanted to bytes. It can handle Kilobytes, Megabytes or
Gigabytes.
.PP
\&\fB\s-1NOTICE:\s0\fR handles bytes, not bits!
.PP
.Vb 1
\&    my $bytes = $cache\->parse_size(\*(Aq30M\*(Aq);
\&
\&    # doesn\*(Aqt need an existing object
\&    $bytes = Dancer::Route::Cache\->parse_size(\*(Aq300G\*(Aq); # works this way too
.Ve
.SS "route_cache_size"
.IX Subsection "route_cache_size"
Returns a rough calculation the size of the cache. This is used to enforce the
size limit.
.SS "route_cache_paths"
.IX Subsection "route_cache_paths"
Returns all the paths in the cache. This is used to enforce the path limit.
Please be careful if you use \*(L"mount\*(R" in Plack::Builder and some applications \-
routes are linked with applications and same path may be in some applications
but with different handlers!
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "size_limit($limit)"
.IX Subsection "size_limit($limit)"
Allows one to set a size limit of the cache.
.PP
Returns the limit (post-set).
.PP
.Vb 2
\&    $cache\->size_limit(\*(Aq10K\*(Aq);      # sets limit
\&    my $limit = $cache\->size_limit; # gets limit
.Ve
.SS "path_limit($limit)"
.IX Subsection "path_limit($limit)"
A path limit. That is, the amount of paths that whose routes will be cached.
.PP
Returns the limit (post-set).
.PP
.Vb 2
\&    $cache\->path_limit(\*(Aq100\*(Aq);      # sets limit
\&    my $limit = $cache\->path_limit; # gets limit
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
