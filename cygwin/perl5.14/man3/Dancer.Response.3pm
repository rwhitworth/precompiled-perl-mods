.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Response 3"
.TH Dancer::Response 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Response \- Response object for Dancer
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # create a new response object
\&    Dancer::Response\->new(
\&        status => 200,
\&        content => \*(Aqthis is my content\*(Aq
\&    );
\&
\&    Dancer::SharedData\->response\->status; # 200
\&
\&    # fetch current response object
\&    my $response = Dancer::SharedData\->response;
\&
\&    # fetch the current status
\&    $response\->status; # 200
\&
\&    # change the status
\&    $response\->status(500);
.Ve
.SH "PUBLIC API"
.IX Header "PUBLIC API"
.SS "new"
.IX Subsection "new"
.Vb 5
\&    Dancer::Response\->new(
\&        status  => 200,
\&        content => \*(Aqmy content\*(Aq,
\&        headers => [\*(AqX\-Foo\*(Aq => \*(Aqfoo\-value\*(Aq, \*(AqX\-Bar\*(Aq => \*(Aqbar\-value\*(Aq],
\&    );
.Ve
.PP
create and return a new Dancer::Response object
.SS "current"
.IX Subsection "current"
.Vb 1
\&    my $response = Dancer::SharedData\->response\->current();
.Ve
.PP
return the current Dancer::Response object, and reset the object
.SS "exists"
.IX Subsection "exists"
.Vb 3
\&    if ($response\->exists) {
\&        ...
\&    }
.Ve
.PP
test if the Dancer::Response object exists
.SS "content"
.IX Subsection "content"
.Vb 3
\&    # get the content
\&    my $content = $response\->content;
\&    my $content = Dancer::SharedData\->response\->content;
\&
\&    # set the content
\&    $response\->content(\*(Aqmy new content\*(Aq);
\&    Dancer::SharedData\->response\->content(\*(Aqmy new content\*(Aq);
.Ve
.PP
set or get the content of the current response object
.SS "status"
.IX Subsection "status"
.Vb 3
\&    # get the status
\&    my $status = $response\->status;
\&    my $status = Dancer::SharedData\->response\->status;
\&
\&    # set the status
\&    $response\->status(201);
\&    Dancer::SharedData\->response\->status(201);
.Ve
.PP
Set or get the status of the current response object.  The default status is 200.
.SS "content_type"
.IX Subsection "content_type"
.Vb 3
\&    # get the status
\&    my $ct = $response\->content_type;
\&    my $ct = Dancer::SharedData\->response\->content_type;
\&
\&    # set the status
\&    $response\->content_type(\*(Aqapplication/json\*(Aq);
\&    Dancer::SharedData\->response\->content_type(\*(Aqapplication/json\*(Aq);
.Ve
.PP
Set or get the status of the current response object.
.SS "pass"
.IX Subsection "pass"
.Vb 2
\&    $response\->pass;
\&    Dancer::SharedData\->response\->pass;
.Ve
.PP
Set the pass value to one for this response.
.SS "has_passed"
.IX Subsection "has_passed"
.Vb 3
\&    if ($response\->has_passed) {
\&        ...
\&    }
\&
\&    if (Dancer::SharedData\->response\->has_passed) {
\&        ...
\&    }
.Ve
.PP
Test if the pass value is set to true.
.SS "halt($content)"
.IX Subsection "halt($content)"
.Vb 2
\&    Dancer::SharedData\->response\->halt();
\&    $response\->halt;
.Ve
.PP
Stops the processing of the current request.  See \*(L"halt\*(R" in Dancer.
.SS "halted"
.IX Subsection "halted"
.Vb 3
\&    if (Dancer::SharedData\->response\->halted) {
\&       ...
\&    }
\&
\&    if ($response\->halted) {
\&        ...
\&    }
.Ve
.PP
This flag will be true if the current response has been halted.
.SS "header"
.IX Subsection "header"
.Vb 3
\&    # set the header
\&    $response\->header(\*(AqX\-Foo\*(Aq => \*(Aqbar\*(Aq);
\&    Dancer::SharedData\->response\->header(\*(AqX\-Foo\*(Aq => \*(Aqbar\*(Aq);
\&
\&    # get the header
\&    my $header = $response\->header(\*(AqX\-Foo\*(Aq);
\&    my $header = Dancer::SharedData\->response\->header(\*(AqX\-Foo\*(Aq);
.Ve
.PP
Get or set the value of a header.
.SS "headers"
.IX Subsection "headers"
.Vb 2
\&    $response\->headers(\*(AqX\-Foo\*(Aq => \*(Aqfff\*(Aq, \*(AqX\-Bar\*(Aq => \*(Aqbbb\*(Aq);
\&    Dancer::SharedData\->response\->headers(\*(AqX\-Foo\*(Aq => \*(Aqfff\*(Aq, \*(AqX\-Bar\*(Aq => \*(Aqbbb\*(Aq);
.Ve
.PP
Return the list of headers for the current response.
.SS "headers_to_array"
.IX Subsection "headers_to_array"
.Vb 2
\&    my $headers_psgi = $response\->headers_to_array();
\&    my $headers_psgi = Dancer::SharedData\->response\->headers_to_array();
.Ve
.PP
This method is called before returning a \s-1PSGI\s0 response. It transforms the list of headers to an array reference.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
