.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Manual::UsingWithMoose 3"
.TH Type::Tiny::Manual::UsingWithMoose 3 "2014-10-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Type::Tiny::Manual::UsingWithMoose \- how to use Type::Tiny and Type::Library with Moose
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   {
\&      package Person;
\&      
\&      use Moose;
\&      use Types::Standard qw( Str Int );
\&      use Type::Utils qw( declare as where inline_as coerce from );
\&      
\&      has name => (
\&         is      => "ro",
\&         isa     => Str,
\&      );
\&      
\&      my $PositiveInt = declare
\&         as        Int,
\&         where     {  $_ > 0  },
\&         inline_as { "$_ =~ /^[0\-9]+\e$/ and $_ > 0" };
\&      
\&      coerce $PositiveInt, from Int, q{ abs $_ };
\&      
\&      has age => (
\&         is      => "ro",
\&         isa     => $PositiveInt,
\&         coerce  => 1,
\&         writer  => "_set_age",
\&      );
\&      
\&      sub get_older {
\&         my $self = shift;
\&         my ($years) = @_;
\&         $PositiveInt\->assert_valid($years);
\&         $self\->_set_age($self\->age + $years);
\&      }
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Type::Tiny type constraints have an \s-1API\s0 almost identical to that of
Moose::Meta::TypeConstraint. It is also able to build a
Moose::Meta::TypeConstraint constraint from a Type::Tiny constraint, and
will do so automatically when needed. When Moose.pm is loaded, Type::Tiny
will use Perl's \f(CW\*(C`AUTOLOAD\*(C'\fR feature to proxy method calls through to the
Moose::Meta::TypeConstraint object. In short, you can use a Type::Tiny
object pretty much anywhere you'd use a Moose::Meta::TypeConstraint and
you are unlikely to notice the difference.
.SS "Per-Attribute Coercions"
.IX Subsection "Per-Attribute Coercions"
Type::Tiny offers convenience methods to alter the list of coercions
associated with a type constraint. Let's imagine we wish to allow our
\&\f(CW\*(C`name\*(C'\fR attribute to be coerced from an arrayref of strings.
.PP
.Vb 7
\&      has name => (
\&         is      => "ro",
\&         isa     => Str\->plus_coercions(
\&            ArrayRef[Str], sub { join " ", @{$_} },
\&         ),
\&         coerce  => 1,
\&      );
.Ve
.PP
This coercion will apply to the \f(CW\*(C`name\*(C'\fR attribute only; other attributes
using the \f(CW\*(C`Str\*(C'\fR type constraint will be unaffected.
.PP
See the documentation for \f(CW\*(C`plus_coercions\*(C'\fR, \f(CW\*(C`minus_coercions\*(C'\fR and
\&\f(CW\*(C`no_coercions\*(C'\fR in Type::Tiny.
.SS "Optimization"
.IX Subsection "Optimization"
The usual advice for optimizing type constraints applies: use type constraints
which can be inlined whenever possible.
.PP
Defining coercions as strings rather than coderefs won't give you as much of
a boost with Moose as it does with Moo, because Moose doesn't inline coercion
code. However, it should still improve performance somewhat because it allows
Type::Coercion to do some internal inlining.
.PP
See also Type::Tiny::Manual::Optimization.
.SS "Interactions with MooseX-Types"
.IX Subsection "Interactions with MooseX-Types"
Type::Tiny and MooseX::Types type constraints should \*(L"play nice\*(R". If, for
example, \f(CW\*(C`ArrayRef\*(C'\fR is taken from Types::Standard (i.e. a Type::Tiny\-based
type library), and \f(CW\*(C`PositiveInt\*(C'\fR is taken from MooseX::Types::Common::Numeric,
then the following should \*(L"just work\*(R":
.PP
.Vb 1
\&   isa => ArrayRef[ PositiveInt ]
\&
\&   isa => PositiveInt | ArrayRef
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For examples using Type::Tiny with Moose see the \s-1SYNOPSIS\s0 sections of
Type::Tiny and Type::Library, and the
Moose integration tests <https://github.com/tobyink/p5-type-tiny/tree/master/t/30-integration/Moose>,
and
MooseX-Types integration tests <https://github.com/tobyink/p5-type-tiny/tree/master/t/30-integration/MooseX-Types>
in the test suite.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1WITHOUT\s0 \s-1LIMITATION\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTIBILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
