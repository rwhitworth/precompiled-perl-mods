.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Cookies 3"
.TH Dancer::Cookies 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Cookies \- a singleton storage for all cookies
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Dancer::Cookies;
\&
\&    my $cookies = Dancer::Cookies\->cookies;
\&
\&    foreach my $name ( keys %{$cookies} ) {
\&        my $cookie = $cookies\->{$name};
\&        my $value  = $cookie\->value;
\&        print "$name => $value\en";
\&    }
\&
\&
\&    cookie lang => "fr\-FR"; #set a cookie and return its value
\&    cookie lang => "fr\-FR", expires => "2 hours";
\&    cookie "lang"           #return a cookie value
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer::Cookies keeps all the cookies defined by the application and makes them
accessible and provides a few helper functions for cookie handling with regards
to the stored cookies.
.SH "METHODS"
.IX Header "METHODS"
.SS "init"
.IX Subsection "init"
This method is called when \f(CW\*(C`\->new()\*(C'\fR is called. It creates a storage of
cookies parsed from the environment using \f(CW\*(C`parse_cookies_from_env\*(C'\fR described
below.
.SS "cookies"
.IX Subsection "cookies"
Returns a hash reference of all cookies, all objects of Dancer::Cookie type.
.PP
The key is the cookie name, the value is the Dancer::Cookie object.
.SS "cookie"
.IX Subsection "cookie"
\&\f(CW\*(C`cookie\*(C'\fR method is useful to query or set cookies easily.
.PP
.Vb 3
\&    cookie lang => "fr\-FR";              # set a cookie and return its value
\&    cookie lang => "fr\-FR", expires => "2 hours";   # extra cookie info
\&    cookie "lang"                        # return a cookie value
.Ve
.SS "parse_cookie_from_env"
.IX Subsection "parse_cookie_from_env"
Fetches all the cookies from the environment, parses them and creates a hashref
of all cookies.
.PP
It also returns all the hashref it created.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
