.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Deployment 3"
.TH Dancer::Deployment 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Deployment \- common ways to put your Dancer app into use
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer has been designed to be flexible, and this flexibility extends to your
choices when deploying your Dancer app.
.SS "Running as a cgi-script (or fast-cgi) under Apache"
.IX Subsection "Running as a cgi-script (or fast-cgi) under Apache"
In providing ultimate flexibility in terms of deployment, your Dancer app can
be run as a simple cgi-script out-of-the-box with no additional web server
configuration needed. Your web server should recognize .cgi files and be able
to serve Perl scripts. The Perl module Plack::Runner is required.
.PP
Start by adding the following to your apache configuration (httpd.conf or
sites\-available/*site*):
.PP
.Vb 2
\&    <VirtualHost *:80>
\&        ServerName www.example.com
\&
\&        # /srv/www.example.com is the root of your
\&        # dancer application
\&        DocumentRoot /srv/www.example.com/public
\&
\&        ServerAdmin you@example.com
\&
\&        <Directory "/srv/www.example.com/public">
\&           AllowOverride None
\&           Options +ExecCGI \-MultiViews +SymLinksIfOwnerMatch
\&           Order allow,deny
\&           Allow from all
\&           AddHandler cgi\-script .cgi
\&        </Directory>
\&
\&        ScriptAlias / /srv/www.example.com/public/dispatch.cgi/
\&
\&        ErrorLog  /var/log/apache2/www.example.com\-error.log
\&        CustomLog /var/log/apache2/www.example.com\-access_log common
\&    </VirtualHost>
.Ve
.PP
Now you can access your dancer application URLs as if you were using the
embedded web server.
.PP
.Vb 1
\&    http://localhost/
.Ve
.PP
This option is a no-brainer, easy to setup, low maintenance but serves requests
slower than all other options.
.PP
You can use the same technique to deploy with FastCGI, by just changing the
lines:
.PP
.Vb 1
\&    AddHandler cgi\-script .cgi
\&    
\&    ...
\&    
\&    ScriptAlias / /srv/www.example.com/public/dispatch.cgi
.Ve
.PP
To:
.PP
.Vb 1
\&    AddHandler fastcgi\-script .fcgi
\&
\&    ...
\&
\&    ScriptAlias / /srv/www.example.com/public/dispatch.fcgi
.Ve
.SS "Running stand-alone"
.IX Subsection "Running stand-alone"
At the simplest, your Dancer app can run standalone, operating as its own
webserver using HTTP::Server::Simple::PSGI.
.PP
Simply fire up your app:
.PP
.Vb 3
\&    $ perl bin/app.pl
\&    >> Listening on 0.0.0.0:3000
\&    == Entering the dance floor ...
.Ve
.PP
Point your browser at it, and away you go!
.PP
This option can be useful for small personal web apps or internal apps, but if
you want to make your app available to the world, it probably won't suit you.
.PP
\fIRunning on Perl webservers with plackup\fR
.IX Subsection "Running on Perl webservers with plackup"
.PP
A number of Perl web servers supporting \s-1PSGI\s0 are available on cpan:
.IP "Starman" 4
.IX Item "Starman"
\&\f(CW\*(C`Starman\*(C'\fR is a high performance web server, with support for preforking,
signals and more.
.IP "Twiggy" 4
.IX Item "Twiggy"
\&\f(CW\*(C`Twiggy\*(C'\fR is an \f(CW\*(C`AnyEvent\*(C'\fR web server, it's light and fast.
.IP "Corona" 4
.IX Item "Corona"
\&\f(CW\*(C`Corona\*(C'\fR is a \f(CW\*(C`Coro\*(C'\fR based web server.
.Sp
\&\fB\s-1WARNING\s0\fR: \f(CW\*(C`Dancer\*(C'\fR's use of global variables and \f(CW\*(C`Coro\*(C'\fR's threaded behaviors
can cause some unexpected behaviors. See this GitHub
issue <https://github.com/PerlDancer/Dancer/issues/929> for more details.
Unless you have really, really strongly compelling reasons to use Corona, 
consider using \f(CW\*(C`Twiggy\*(C'\fR or \f(CW\*(C`Starman\*(C'\fR instead.
.PP
To start your application, just run plackup (see Plack and specific servers
above for all available options):
.PP
.Vb 2
\&   $ plackup bin/app.pl
\&   $ plackup \-E deployment \-s Starman \-\-workers=10 \-p 5001 \-a bin/app.pl
.Ve
.PP
As you can see, the scaffolded Perl script for your app can be used as a \s-1PSGI\s0
startup file.
.PP
Enabling content compression
.IX Subsection "Enabling content compression"
.PP
Content compression (gzip, deflate) can be easily enabled via a Plack
middleware (see Plack#Plack::Middleware): Plack::Middleware::Deflater.
It's a middleware to encode the response body in gzip or deflate, based on
Accept-Encoding \s-1HTTP\s0 request header.
.PP
Enable it as you would enable any Plack middleware. First you need to install
Plack::Middleware::Deflater, then in the configuration file (usually
\&\fIenvironments/development.yml\fR), add these lines:
.PP
.Vb 4
\&  plack_middlewares:
\&    \-
\&      \- Plack::Middleware::Deflater
\&      \- ...
.Ve
.PP
These lines tell Dancer to add Plack::Middleware::Deflater to the list of
middlewares to pass to Plack::Builder, when wrapping the Dancer app. The
syntax is :
.IP "\(bu" 4
as key: the name of the Plack middleware to use
.IP "\(bu" 4
as value: the options to pass it as a list. In our case, there is no option to
specify to Plack::Middleware::Deflater, so we use an empty \s-1YAML\s0 list.
.PP
To test if content compression works, trace the \s-1HTTP\s0 request and response
before and after enabling this middleware. Among other things, you should
notice that the response is gzip or deflate encoded, and contains a header
\&\f(CW\*(C`Content\-Encoding\*(C'\fR set to \f(CW\*(C`gzip\*(C'\fR or \f(CW\*(C`deflate\*(C'\fR
.PP
\fIHosting on DotCloud\fR
.IX Subsection "Hosting on DotCloud"
.PP
The simplest way to achieve this is to push your main application directory
to dotcloud with your \f(CW\*(C`bin/app.pl\*(C'\fR file copied to (or symlinked from)
\&\f(CW\*(C`app.psgi\*(C'\fR.
.PP
Beware that the dotcloud service enforces one environment only, named
\&\f(CW\*(C`deployment\*(C'\fR. So instead of having \f(CW\*(C`environments/development.yml\*(C'\fR or
\&\f(CW\*(C`environments/production.yml\*(C'\fR you \fImust\fR have a file named
\&\f(CW\*(C`environments/deployment.yml\*(C'\fR.
.PP
Also make sure that your \f(CW\*(C`Makefile.PL\*(C'\fR (or other dependency mechanism) includes
both Dancer and Plack::Request.
.PP
The default in-memory session handler won't work, and instead you should switch
to something persistent. Edit \f(CW\*(C`config.yml\*(C'\fR to change \f(CW\*(C`session: \*(AqSimple\*(Aq\*(C'\fR to
(for example) \f(CW\*(C`session: \*(AqYAML\*(Aq\*(C'\fR.
.PP
In case you have issues with Template::Toolkit on Dotcloud
.IX Subsection "In case you have issues with Template::Toolkit on Dotcloud"
.PP
If you use the Template::Toolkit and its \f(CW\*(C`INCLUDE\*(C'\fR or \f(CW\*(C`PROCESS\*(C'\fR directives,
you might need to add the search path of your view files to the config. This is
probably going to be something like
\&\f(CW\*(C`INCLUDE_PATH: \*(Aq/home/dotcloud/current/views\*(Aq\*(C'\fR in \f(CW\*(C`config.yml\*(C'\fR.
.PP
An alternative implementation is to use a variation of the above Plack::Builder
template:
.PP
.Vb 4
\& use Plack::Builder;
\& use Dancer \*(Aq:syntax\*(Aq;
\& use Dancer::Handler;
\& use lib \*(Aqlib\*(Aq;
\&
\& my $app1 = sub {
\&     setting appdir => \*(Aq/home/dotcloud/current\*(Aq;
\&     load_app "My::App";
\&     Dancer::App\->set_running_app("My::App");
\&     my $env = shift;
\&     Dancer::Handler\->init_request_headers($env);
\&     my $req = Dancer::Request\->new(env => $env);
\&     Dancer\->dance($req);
\& };
\&
\& builder {
\&     mount "/app1" => $app1;
\& };
.Ve
.PP
This also supports hosting multiple apps, but you probably also need to specify
the specific Environment configuration to use in your application.
.PP
When mounting under a path on dotcloud, as in the above example, always create
links using the \f(CW\*(C`uri_for()\*(C'\fR method for Dancer routes, and a \f(CW\*(C`uri_base\*(C'\fR
variable for static content as shown in Dancer::Cookbook. This means
whatever base path your app is mounted under, links and form submissions will
continue to work.
.PP
\fICreating a service\fR
.IX Subsection "Creating a service"
.PP
You can turn your app into proper service running in background using one of
the following examples:
.PP
Using Ubic
.IX Subsection "Using Ubic"
.PP
Ubic is a polymorphic service manager. You can use it to start and
stop any services, automatically start them on reboots or daemon failures, and
implement custom status checks.
.PP
A basic \s-1PSGI\s0 service description (usually in /etc/ubic/service/application):
.PP
.Vb 1
\&    use parent qw(Ubic::Service::Plack);
\&
\&    _\|_PACKAGE_\|_\->new(
\&        server => \*(AqStarman\*(Aq,
\&        app => \*(Aq/path/to/your/application/app.pl\*(Aq,
\&        port => 5000,
\&        user => \*(Aqwww\-data\*(Aq,
\&    );
.Ve
.PP
Run \f(CW\*(C`ubic start application\*(C'\fR to start the service.
.PP
Using daemontools
.IX Subsection "Using daemontools"
.PP
daemontools is a collection of tools for managing \s-1UNIX\s0 services. You can use it
to easily start/restart/stop services.
.PP
A basic script to start an application: (in /service/application/run)
.PP
.Vb 1
\&    #!/bin/sh
\&
\&    # if your application is not installed in @INC path:
\&    export PERL5LIB=\*(Aq/path/to/your/application/lib\*(Aq
\&
\&    exec 2>&1 \e
\&    /usr/local/bin/plackup \-s Starman \-a /path/to/your/application/app.pl \-p 5000
.Ve
.PP
\fIRunning stand-alone behind a proxy / load balancer\fR
.IX Subsection "Running stand-alone behind a proxy / load balancer"
.PP
Another option would be to run your app stand-alone as described above, but then
use a proxy or load balancer to accept incoming requests (on the standard port
80, say) and feed them to your Dancer app.
.PP
This could be achieved using various software; examples would include:
.PP
Using Apache's mod_proxy
.IX Subsection "Using Apache's mod_proxy"
.PP
You could set up a VirtualHost for your web app, and proxy all requests through
to it:
.PP
.Vb 4
\&    <VirtualHost mywebapp.example.com:80>
\&    ProxyPass / http://localhost:3000/
\&    ProxyPassReverse / http://localhost:3000/
\&    </VirtualHost>
.Ve
.PP
Or, if you want your webapp to share an existing VirtualHost, you could have it
under a specified dir:
.PP
.Vb 4
\&    ProxyPass /mywebapp/ http://localhost:3000/
\&    <Location /mywebapp/>
\&        RequestHeader set Request\-Base /mywebapp
\&    </Location>
.Ve
.PP
\&\s-1HTTP\s0 header \f(CW\*(C`Request\-Base\*(C'\fR is taken into account by Dancer, only when
\&\f(CW\*(C`behind_proxy\*(C'\fR setting is set to true.
.PP
It is important for you to note that the Apache2 modules mod_headers,
mod_proxy and mod_proxy_http must be enabled.
.PP
.Vb 3
\&    a2enmod headers
\&    a2enmod proxy
\&    a2enmod proxy_http
.Ve
.PP
Note that Apache does not pass protocol information when proxying, so if
needed then you will need to set it manually in your Apache config:
.PP
.Vb 1
\&    RequestHeader set X_FORWARDED_PROTO "https"
.Ve
.PP
It is also important to set permissions for proxying for security purposes,
below is an example.
.PP
.Vb 4
\&    <Proxy *>
\&      Order allow,deny
\&      Allow from all
\&    </Proxy>
.Ve
.PP
Using perlbal
.IX Subsection "Using perlbal"
.PP
\&\f(CW\*(C`Perlbal\*(C'\fR is a single-threaded event-based server written in Perl supporting
\&\s-1HTTP\s0 load balancing, web serving, and a mix of the two, available from
<http://www.danga.com/perlbal/>
.PP
It processes hundreds of millions of requests a day just for LiveJournal, Vox
and TypePad and dozens of other \*(L"Web 2.0\*(R" applications.
.PP
It can also provide a management interface to let you see various information on
requests handled etc.
.PP
It could easily be used to handle requests for your Dancer apps, too.
.PP
It can be easily installed from \s-1CPAN:\s0
.PP
.Vb 1
\&    perl \-MCPAN \-e \*(Aqinstall Perlbal\*(Aq
.Ve
.PP
Once installed, you'll need to write a configuration file.  See the examples
provided with perlbal, but you'll probably want something like:
.PP
.Vb 5
\&    CREATE POOL my_dancers
\&    POOL my_dancers ADD 10.0.0.10:3030
\&    POOL my_dancers ADD 10.0.0.11:3030
\&    POOL my_dancers ADD 10.0.0.12:3030
\&    POOL my_dancers ADD 10.0.0.13:3030
\&
\&    CREATE SERVICE my_webapp
\&    SET listen          = 0.0.0.0:80
\&    SET role            = reverse_proxy
\&    SET pool            = my_dancers
\&    SET persist_client  = on
\&    SET persist_backend = on
\&    SET verify_backend  = on
\&    ENABLE my_webapp
.Ve
.PP
Using balance
.IX Subsection "Using balance"
.PP
\&\f(CW\*(C`balance\*(C'\fR is a simple load-balancer from Inlab Software, available from
<http://www.inlab.de/balance.html>.
.PP
It could be used simply to hand requests to a standalone Dancer app. You could
even run several instances of your Dancer app, on the same machine or on several
machines, and use a machine running balance to distribute the requests between
them, for some serious heavy traffic handling!
.PP
To listen on port 80, and send requests to a Dancer app on port 3000:
.PP
.Vb 1
\&    balance http localhost:3000
.Ve
.PP
To listen on a specified \s-1IP\s0 only on port 80, and distribute requests between
multiple Dancer apps on multiple other machines:
.PP
.Vb 1
\&    balance \-b 10.0.0.1 80 10.0.0.2:3000 10.0.0.3:3000 10.0.0.4:3000
.Ve
.PP
Using Lighttpd
.IX Subsection "Using Lighttpd"
.PP
You can use Lighttp's mod_proxy:
.PP
.Vb 7
\&    $HTTP["url"] =~ "/application" {
\&        proxy.server = (
\&            "/" => (
\&                "application" => ( "host" => "127.0.0.1", "port" => 3000 )
\&            )
\&        )
\&    }
.Ve
.PP
This configuration will proxy all request to the \fB/application\fR path to the
path \fB/\fR on localhost:3000.
.PP
Using Nginx
.IX Subsection "Using Nginx"
.PP
with Nginx:
.PP
.Vb 3
\&    upstream backendurl {
\&        server unix:THE_PATH_OF_YOUR_PLACKUP_SOCKET_HERE.sock;
\&    }
\&
\&    server {
\&      listen       80;
\&      server_name YOUR_HOST_HERE;
\&
\&      access_log /var/log/YOUR_ACCESS_LOG_HERE.log;
\&      error_log  /var/log/YOUR_ERROR_LOG_HERE.log info;
\&
\&      root YOUR_ROOT_PROJECT/public;
\&      location / {
\&        try_files $uri @proxy;
\&        access_log off;
\&        expires max;
\&      }
\&
\&      location @proxy {
\&            proxy_set_header Host $http_host;
\&            proxy_set_header X\-Forwarded\-Host $host;
\&            proxy_set_header X\-Real\-IP $remote_addr;
\&            proxy_set_header X\-Forwarded\-For $proxy_add_x_forwarded_for;
\&            proxy_set_header X\-Forwarded\-Proto $scheme;
\&            proxy_pass       http://backendurl;
\&      }
\&
\&    }
.Ve
.PP
You will need plackup to start a worker listening on a socket :
.PP
.Vb 2
\&    cd YOUR_PROJECT_PATH
\&    sudo \-u www plackup \-E production \-s Starman \-\-workers=2 \-l THE_PATH_OF_YOUR_PLACKUP_SOCKET_HERE.sock \-a bin/app.pl
.Ve
.PP
A good way to start this is to use \f(CW\*(C`daemontools\*(C'\fR and place this line with
all environments variables in the \*(L"run\*(R" file.
.PP
Using HAProxy
.IX Subsection "Using HAProxy"
.PP
\&\f(CW\*(C`HAProxy\*(C'\fR is a reliable high-performance \s-1TCP/HTTP\s0 load balancer written in C available from
<http://haproxy.1wt.eu/>.
.PP
Suppose we want to run an application at \f(CW\*(C`app.example.com:80\*(C'\fR and would to use two
backends listen on hosts \f(CW\*(C`app\-be1.example.com:3000\*(C'\fR and \f(CW\*(C`app\-be2.example.com:3000\*(C'\fR.
.PP
Here is HAProxy configuration file (haproxy.conf):
.PP
.Vb 11
\&    global
\&        nbproc  1
\&        maxconn 4096
\&        user    nobody
\&        group   nobody
\&        # haproxy logs will be collected by syslog
\&        # syslog: unix socket path or tcp pair (ipaddress:port)
\&        log     /var/run/log local0
\&        daemon
\&        # enable compression (haproxy v1.5\-dev13 and above required)
\&        tune.comp.maxlevel  5
\&
\&    defaults
\&        log     global
\&        option  httpclose
\&        option  httplog
\&        option  dontlognull
\&        option  forwardfor
\&        option  abortonclose
\&        mode    http
\&        balance roundrobin
\&        retries 3
\&        timeout connect         5s
\&        timeout server          30s
\&        timeout client          30s
\&        timeout http\-keep\-alive 200m
\&        # enable compression (haproxy v1.5\-dev13 and above required)
\&        compression algo gzip
\&        compression type text/html application/javascript text/css application/x\-javascript text/javascript
\&
\&    # application frontend (available at http://app.example.com)
\&    frontend app.example.com
\&        bind                  :80
\&        # modify request headers
\&        reqadd                X\-Forwarded\-Proto:\e http
\&        reqadd                X\-Forwarded\-Port:\e 80
\&        # modify response headers
\&        rspdel                ^Server:.*
\&        rspdel                ^X\-Powered\-By:.*
\&        rspadd                Server:\e Dethklok\e (Unix/0.2.3)
\&        rate\-limit sessions   1024
\&        acl is\-haproxy\-stats  path_beg /stats
\&        # uncomment if you\*(Aqd like to get haproxy usage statistics
\&        # use_backend haproxy   if is\-haproxy\-stats
\&        default_backend       dynamic
\&
\&    # haproxy statistics (available at http://app.example.com/stats)
\&    backend haproxy
\&        stats uri             /stats
\&        stats refresh         180s
\&        stats realm           app.example.com\e haproxy\e statistics
\&        # change credentials
\&        stats auth            admin1:password1
\&        stats auth            admin2:password2
\&        stats hide\-version
\&        stats show\-legends
\&
\&    # application backends
\&    backend dynamic
\&        # change path_info to check and value of the Host header sent to application server
\&        option httpchk HEAD / HTTP/1.1\er\enHost:\e app.example.com
\&        server app1 app\-be1.example.com:3000 check inter 30s
\&        server app2 app\-be2.example.com:3000 check inter 30s
.Ve
.PP
We will need to start the workers on each backend of our application. This can be done by starman utility:
.PP
.Vb 4
\&    # on app\-be1.example.com
\&    $ starman \-\-workers=2 \-\-listen :3000 /path/to/app.pl
\&    # on app\-be2.example.com
\&    $ starman \-\-workers=2 \-\-listen :3000 /path/to/app.pl
.Ve
.PP
Then start the haproxy itself:
.PP
.Vb 4
\&    # check the configuration..
\&    $ sudo haproxy \-c \-f haproxy.conf
\&    # now really start it..
\&    $ sudo haproxy \-f haproxy.conf
.Ve
.PP
\fIPlackup Chef Cookbook\fR
.IX Subsection "Plackup Chef Cookbook"
.PP
A psgi chef cookbook supporting Dancer (as well as \fICatalyst\fR)
written by Alexey Melezhik is available
at <http://community.opscode.com/cookbooks/psgi>.
.SS "Running from Apache"
.IX Subsection "Running from Apache"
You can run your Dancer app from Apache using the following examples:
.PP
\fIRunning from Apache with Plack\fR
.IX Subsection "Running from Apache with Plack"
.PP
You can run your app from Apache using \s-1PSGI\s0 (Plack), with a config like the
following:
.PP
.Vb 4
\&    <VirtualHost myapp.example.com>
\&        ServerName www.myapp.example.com
\&        ServerAlias myapp.example.com
\&        DocumentRoot /websites/myapp.example.com
\&
\&        <Directory /websites/myapp.example.com>
\&            AllowOverride None
\&            Order allow,deny
\&            Allow from all
\&        </Directory>
\&
\&        <Location />
\&            SetHandler perl\-script
\&            PerlResponseHandler Plack::Handler::Apache2
\&            PerlSetVar psgi_app /websites/myapp.example.com/app.pl
\&        </Location>
\&
\&        ErrorLog  /websites/myapp.example.com/logs/error_log
\&        CustomLog /websites/myapp.example.com/logs/access_log common
\&    </VirtualHost>
.Ve
.PP
To set the environment you want to use for your application (production or
development), you can set it this way:
.PP
.Vb 5
\&    <VirtualHost>
\&        ...
\&        SetEnv DANCER_ENVIRONMENT "production"
\&        ...
\&    </VirtualHost>
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR Only a single Dancer application can be deployed using the
\&\f(CW\*(C`Plack::Handler::Apache2\*(C'\fR method. Multiple Dancer applications
\&\fBwill not work properly\fR (The routes will be mixed-up between the
applications).
.PP
It's recommended to start each app with \f(CW\*(C`plackup\*(C'\fR using your
favorite server (Starman, for example) and then put a web server (Apache,
Nginx, Perlbal, etc.) as a frontend server for both apps using reverse proxy
(\s-1HTTP\s0 based, no fastcgi).
.PP
\fIRunning from Apache under appdir\fR
.IX Subsection "Running from Apache under appdir"
.PP
If you want to deploy multiple applications under the same VirtualHost, using
one application per directory for example, you can do the following.
.PP
This example uses the FastCGI dispatcher that comes with Dancer, but you should
be able to adapt this to use any other way of deployment described in this
guide. The only purpose of this example is to show how to deploy multiple
applications under the same base directory/virtualhost.
.PP
.Vb 5
\&    <VirtualHost *:80>
\&        ServerName localhost
\&        DocumentRoot "/path/to/rootdir"
\&        RewriteEngine On
\&        RewriteCond %{REQUEST_FILENAME} !\-f
\&
\&        <Directory "/path/to/rootdir">
\&            AllowOverride None
\&            Options +ExecCGI \-MultiViews +SymLinksIfOwnerMatch
\&            Order allow,deny
\&            Allow from all
\&            AddHandler fastcgi\-script .fcgi
\&        </Directory>
\&
\&        RewriteRule /App1(.*)$ /App1/public/dispatch.fcgi$1 [QSA,L]
\&        RewriteRule /App2(.*)$ /App2/public/dispatch.fcgi$1 [QSA,L]
\&        ...
\&        RewriteRule /AppN(.*)$ /AppN/public/dispatch.fcgi$1 [QSA,L]
\&    </VirtualHost>
.Ve
.PP
Of course, if your Apache configuration allows that, you can put the
RewriteRules in a .htaccess file directly within the application's directory,
which lets you add a new application without changing the Apache configuration.
.SS "Running on lighttpd (\s-1CGI\s0)"
.IX Subsection "Running on lighttpd (CGI)"
To run as a \s-1CGI\s0 app on lighttpd, just create a soft link to the dispatch.cgi
script (created when you run dancer \-a MyApp) inside your system's cgi-bin
folder. Make sure mod_cgi is enabled.
.PP
.Vb 1
\&    ln \-s /path/to/MyApp/public/dispatch.cgi /usr/lib/cgi\-bin/mycoolapp.cgi
.Ve
.SS "Running on lighttpd (FastCGI)"
.IX Subsection "Running on lighttpd (FastCGI)"
Make sure mod_fcgi is enabled. You also must have \s-1FCGI\s0 installed.
.PP
This example configuration uses \s-1TCP/IP:\s0
.PP
.Vb 11
\&    $HTTP["url"] == "^/app" {
\&        fastcgi.server += (
\&            "/app" => (
\&                "" => (
\&                    "host" => "127.0.0.1",
\&                    "port" => "5000",
\&                    "check\-local" => "disable",
\&                )
\&            )
\&        )
\&    }
.Ve
.PP
Launch your application:
.PP
.Vb 1
\&    plackup \-s FCGI \-\-port 5000 bin/app.pl
.Ve
.PP
This example configuration uses a socket:
.PP
.Vb 10
\&    $HTTP["url"] =~ "^/app" {
\&        fastcgi.server += (
\&            "/app" => (
\&                "" => (
\&                    "socket" => "/tmp/fcgi.sock",
\&                    "check\-local" => "disable",
\&                )
\&            )
\&        )
\&    }
.Ve
.PP
Launch your application:
.PP
.Vb 1
\&    plackup \-s FCGI \-\-listen /tmp/fcgi.sock bin/app.pl
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
