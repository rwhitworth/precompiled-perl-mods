.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Mojo::Exception 3"
.TH Mojo::Exception 3 "2015-04-20" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Exception \- Exceptions with context
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Exception;
\&
\&  # Throw exception
\&  Mojo::Exception\->throw(\*(AqNot again!\*(Aq);
\&
\&  # Customize exception
\&  die Mojo::Exception\->new(\*(AqNot again!\*(Aq)\->trace(2)\->verbose(1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Exception is a container for exceptions with context information.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Exception implements the following attributes.
.SS "frames"
.IX Subsection "frames"
.Vb 2
\&  my $frames = $e\->frames;
\&  $e         = $e\->frames($frames);
.Ve
.PP
Stacktrace.
.SS "line"
.IX Subsection "line"
.Vb 2
\&  my $line = $e\->line;
\&  $e       = $e\->line([3 => \*(Aqfoo\*(Aq]);
.Ve
.PP
The line where the exception occurred.
.SS "lines_after"
.IX Subsection "lines_after"
.Vb 2
\&  my $lines = $e\->lines_after;
\&  $e        = $e\->lines_after([[1 => \*(Aqbar\*(Aq], [2 => \*(Aqbaz\*(Aq]]);
.Ve
.PP
Lines after the line where the exception occurred.
.SS "lines_before"
.IX Subsection "lines_before"
.Vb 2
\&  my $lines = $e\->lines_before;
\&  $e        = $e\->lines_before([[4 => \*(Aqbar\*(Aq], [5 => \*(Aqbaz\*(Aq]]);
.Ve
.PP
Lines before the line where the exception occurred.
.SS "message"
.IX Subsection "message"
.Vb 2
\&  my $msg = $e\->message;
\&  $e      = $e\->message(\*(AqOops!\*(Aq);
.Ve
.PP
Exception message.
.SS "verbose"
.IX Subsection "verbose"
.Vb 2
\&  my $bool = $e\->verbose;
\&  $e       = $e\->verbose($bool);
.Ve
.PP
Render exception with context.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Exception inherits all methods from Mojo::Base and implements the
following new ones.
.SS "new"
.IX Subsection "new"
.Vb 3
\&  my $e = Mojo::Exception\->new;
\&  my $e = Mojo::Exception\->new(\*(AqOops!\*(Aq);
\&  my $e = Mojo::Exception\->new(\*(AqOops!\*(Aq, $files);
.Ve
.PP
Construct a new Mojo::Exception object.
.SS "throw"
.IX Subsection "throw"
.Vb 2
\&  Mojo::Exception\->throw(\*(AqOops!\*(Aq);
\&  Mojo::Exception\->throw(\*(AqOops!\*(Aq, $files);
.Ve
.PP
Throw exception with stacktrace.
.SS "to_string"
.IX Subsection "to_string"
.Vb 1
\&  my $str = $e\->to_string;
.Ve
.PP
Render exception.
.SS "trace"
.IX Subsection "trace"
.Vb 2
\&  $e = $e\->trace;
\&  $e = $e\->trace(2);
.Ve
.PP
Store stacktrace.
.SH "OPERATORS"
.IX Header "OPERATORS"
Mojo::Exception overloads the following operators.
.SS "bool"
.IX Subsection "bool"
.Vb 1
\&  my $bool = !!$e;
.Ve
.PP
Always true.
.SS "stringify"
.IX Subsection "stringify"
.Vb 1
\&  my $str = "$e";
.Ve
.PP
Alias for \*(L"to_string\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
