.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Dancer::Serializer::JSON 3"
.TH Dancer::Serializer::JSON 3 "2015-07-03" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Serializer::JSON \- serializer for handling JSON data
.SH "VERSION"
.IX Header "VERSION"
version 1.3140
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is an interface between Dancer's serializer engine abstraction layer
and the \s-1JSON\s0 module.
.PP
In order to use this engine, use the template setting:
.PP
.Vb 1
\&    serializer: JSON
.Ve
.PP
This can be done in your config.yml file or directly in your app code with the
\&\fBset\fR keyword. This serializer will also be used when the serializer is set
to \fBmutable\fR and the correct Accept headers are supplied.
.PP
The \s-1JSON\s0 module will pass configuration variables straight through.
Some of these can be useful when debugging/developing your app: \fBpretty\fR and
\&\fBcanonical\fR, and others useful with ORMs like DBIx::Class: \fBallow_blessed\fR
and \fBconvert_blessed\fR.  Please consult the \s-1JSON\s0 documentation for more
information and a full list of configuration settings. You can add extra
settings to the \fBengines\fR configuration to turn these on. For example:
.PP
.Vb 5
\&    engines:
\&        JSON:
\&            allow_blessed:   \*(Aq1\*(Aq
\&            canonical:       \*(Aq1\*(Aq
\&            convert_blessed: \*(Aq1\*(Aq
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "serialize"
.IX Subsection "serialize"
Serialize a data structure to a \s-1JSON\s0 structure.
.SS "deserialize"
.IX Subsection "deserialize"
Deserialize a \s-1JSON\s0 structure to a data structure
.SS "content_type"
.IX Subsection "content_type"
Return 'application/json'
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
