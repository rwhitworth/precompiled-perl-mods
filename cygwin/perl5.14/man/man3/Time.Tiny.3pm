.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Time::Tiny 3"
.TH Time::Tiny 3 "2009-12-01" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::Tiny \- A time object, with as little code as possible
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # Create a time manually
\&  $christmas = Time::Tiny\->new(
\&      hour   => 10,
\&      minute => 45,
\&      second => 0,
\&      );
\&  
\&  # Show the current time
\&  $now = Time::Tiny\->now;
\&  print "Hour   : " . $now\->hour   . "\en";
\&  print "Minute : " . $now\->minute . "\en";
\&  print "Second : " . $now\->second . "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTime::Tiny\fR is a member of the DateTime::Tiny suite of time modules.
.PP
It implements an extremely lightweight object that represents a time,
without any time data.
.SS "The Tiny Mandate"
.IX Subsection "The Tiny Mandate"
Many \s-1CPAN\s0 modules which provide the best implementation of a concept
can be very large. For some reason, this generally seems to be about
3 megabyte of ram usage to load the module.
.PP
For a lot of the situations in which these large and comprehensive
implementations exist, some people will only need a small fraction of the
functionality, or only need this functionality in an ancillary role.
.PP
The aim of the Tiny modules is to implement an alternative to the large
module that implements a subset of the functionality, using as little
code as possible.
.PP
Typically, this means a module that implements between 50% and 80% of
the features of the larger module, but using only 100 kilobytes of code,
which is about 1/30th of the larger module.
.SS "The Concept of Tiny Date and Time"
.IX Subsection "The Concept of Tiny Date and Time"
Due to the inherent complexity, Date and Time is intrinsically very
difficult to implement properly.
.PP
The arguably \fBonly\fR module to implement it completely correct is
DateTime. However, to implement it properly DateTime is quite slow
and requires 3\-4 megabytes of memory to load.
.PP
The challenge in implementing a Tiny equivalent to DateTime is to do so
without making the functionality critically flawed, and to carefully
select the subset of functionality to implement.
.PP
If you look at where the main complexity and cost exists, you will find
that it is relatively cheap to represent a date or time as an object,
but much much more expensive to modify or convert the object.
.PP
As a result, \fBTime::Tiny\fR provides the functionality required to
represent a date as an object, to stringify the date and to parse it
back in, but does \fBnot\fR allow you to modify the dates.
.PP
The purpose of this is to allow for date object representations in
situations like log parsing and fast real-time work.
.PP
The problem with this is that having no ability to modify date limits
the usefulness greatly.
.PP
To make up for this, \fBif\fR you have DateTime installed, any
\&\fBTime::Tiny\fR module can be inflated into the equivalent DateTime
as needing, loading DateTime on the fly if necesary.
.PP
For the purposes of date/time logic, all \fBTime::Tiny\fR objects exist
in the \*(L"C\*(R" locale, and the \*(L"floating\*(R" time zone (although obviously in a
pure date context, the time zone largely doesn't matter).
.PP
When converting up to full DateTime objects, these local and time
zone settings will be applied (although an ability is provided to
override this).
.PP
In addition, the implementation is strictly correct and is intended to
be very easily to sub-class for specific purposes of your own.
.SH "METHODS"
.IX Header "METHODS"
In general, the intent is that the \s-1API\s0 be as close as possible to the
\&\s-1API\s0 for DateTime. Except, of course, that this module implements
less of it.
.SS "new"
.IX Subsection "new"
.Vb 6
\&  # Create a Time::Tiny object for midnight
\&  my $midnight = Time::Tiny\->new(
\&      hour   => 0,
\&      minute => 0,
\&      second => 0,
\&  );
.Ve
.PP
The \f(CW\*(C`new\*(C'\fR constructor creates a new \fBTime::Tiny\fR object.
.PP
It takes three named params. \f(CW\*(C`hour\*(C'\fR should be the hour of the day (0\-23),
\&\f(CW\*(C`minute\*(C'\fR should be the minute of the hour (0\-59), and \f(CW\*(C`second\*(C'\fR should be
the second of the minute (0\-59).
.PP
These are the only params accepted.
.PP
Returns a new \fBTime::Tiny\fR object.
.SS "now"
.IX Subsection "now"
.Vb 1
\&  my $current_time = Time::Tiny\->now;
.Ve
.PP
The \f(CW\*(C`now\*(C'\fR method creates a new date object for the current time.
.PP
The time created will be based on localtime, despite the fact that
the time is created in the floating time zone.
.PP
This means that the time created by \f(CW\*(C`now\*(C'\fR is somewhat lossy, but
since the primary purpose of \fBTime::Tiny\fR is for small transient
time objects, and \fBnot\fR for use in calculations and comparisons,
this is considered acceptable for now.
.PP
Returns a new \fBTime::Tiny\fR object.
.SS "hour"
.IX Subsection "hour"
The \f(CW\*(C`hour\*(C'\fR accessor returns the hour component of the time as
an integer from zero to twenty-three (0\-23) in line with 24\-hour
time.
.SS "minute"
.IX Subsection "minute"
The \f(CW\*(C`minute\*(C'\fR accessor returns the minute component of the time
as an integer from zero to fifty-nine (0\-59).
.SS "second"
.IX Subsection "second"
The \f(CW\*(C`second\*(C'\fR accessor returns the second component of the time
as an integer from zero to fifty-nine (0\-59).
.SS "from_string"
.IX Subsection "from_string"
The \f(CW\*(C`from_string\*(C'\fR method creates a new \fBTime::Tiny\fR object from a string.
.PP
The string is expected to be an \*(L"hh:mm:ss\*(R" type \s-1ISO\s0 8601 time string.
.PP
.Vb 1
\&  my $almost_midnight = Time::Tiny\->from_string( \*(Aq23:59:59\*(Aq );
.Ve
.PP
Returns a new \fBTime::Tiny\fR object, or throws an exception on error.
.SS "as_string"
.IX Subsection "as_string"
The \f(CW\*(C`as_string\*(C'\fR method converts the time object to an \s-1ISO\s0 8601
time string, with seperators (see example in \f(CW\*(C`from_string\*(C'\fR).
.PP
Returns a string.
.SS "DateTime"
.IX Subsection "DateTime"
The \f(CW\*(C`DateTime\*(C'\fR method is used to create a DateTime object
that is equivalent to the \fBTime::Tiny\fR object, for use in
comversions and caluculations.
.PP
As mentioned earlier, the object will be set to the 'C' locate,
and the 'floating' time zone.
.PP
If installed, the DateTime module will be loaded automatically.
.PP
Returns a DateTime object, or throws an exception if DateTime
is not installed on the current host.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time\-Tiny <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Tiny>
.PP
For other issues, or commercial enhancement or support, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DateTime, DateTime::Tiny, Time::Tiny, Config::Tiny, ali.as
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 \- 2009 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
