.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Encode::MIME::Header 3"
.TH Encode::MIME::Header 3 "2015-06-30" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Encode::MIME::Header \-\- MIME 'B' and 'Q' header encoding
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Encode qw/encode decode/;
\&    $utf8   = decode(\*(AqMIME\-Header\*(Aq, $header);
\&    $header = encode(\*(AqMIME\-Header\*(Aq, $utf8);
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module implements \s-1RFC\s0 2047 Mime Header Encoding.  There are 3
variant encoding names; \f(CW\*(C`MIME\-Header\*(C'\fR, \f(CW\*(C`MIME\-B\*(C'\fR and \f(CW\*(C`MIME\-Q\*(C'\fR.  The
difference is described below
.PP
.Vb 5
\&              decode()          encode()
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  MIME\-Header Both B and Q      =?UTF\-8?B?....?=
\&  MIME\-B      B only; Q croaks  =?UTF\-8?B?....?=
\&  MIME\-Q      Q only; B croaks  =?UTF\-8?Q?....?=
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When you decode(=?\fIencoding\fR?\fIX\fR?\fI\s-1ENCODED\s0 \s-1WORD\s0\fR?=), \fI\s-1ENCODED\s0 \s-1WORD\s0\fR
is extracted and decoded for \fIX\fR encoding (B for Base64, Q for
Quoted-Printable). Then the decoded chunk is fed to
decode(\fIencoding\fR).  So long as \fIencoding\fR is supported by Encode,
any source encoding is fine.
.PP
When you encode, it just encodes \s-1UTF\-8\s0 string with \fIX\fR encoding then
quoted with =?UTF\-8?\fIX\fR?....?= .  The parts that \s-1RFC\s0 2047 forbids to
encode are left as is and long lines are folded within 76 bytes per
line.
.SH "BUGS"
.IX Header "BUGS"
It would be nice to support encoding to non\-UTF8, such as =?ISO\-2022\-JP?
and =?ISO\-8859\-1?= but that makes the implementation too complicated.
These days major mail agents all support =?UTF\-8? so I think it is
just good enough.
.PP
Due to popular demand, 'MIME\-Header\-ISO_2022_JP' was introduced by
Makamaka.  Thre are still too many MUAs especially cellular phone
handsets which does not grok \s-1UTF\-8\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode
.PP
\&\s-1RFC\s0 2047, <http://www.faqs.org/rfcs/rfc2047.html> and many other
locations.
