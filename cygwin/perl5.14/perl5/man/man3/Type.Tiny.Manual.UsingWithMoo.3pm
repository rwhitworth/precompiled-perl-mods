.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Manual::UsingWithMoo 3"
.TH Type::Tiny::Manual::UsingWithMoo 3 "2014-10-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Type::Tiny::Manual::UsingWithMoo \- how to use Type::Tiny and Type::Library with Moo
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   {
\&      package Person;
\&      
\&      use Moo;
\&      use Types::Standard qw( Str Int );
\&      use Type::Utils qw( declare as where inline_as coerce from );
\&      
\&      has name => (
\&         is      => "ro",
\&         isa     => Str,
\&      );
\&      
\&      my $PositiveInt = declare
\&         as        Int,
\&         where     {  $_ > 0  },
\&         inline_as { "$_ =~ /^[0\-9]+\e$/ and $_ > 0" };
\&      
\&      coerce $PositiveInt, from Int, q{ abs $_ };
\&      
\&      has age => (
\&         is      => "rwp",
\&         isa     => $PositiveInt,
\&         coerce  => $PositiveInt\->coercion,
\&      );
\&      
\&      sub get_older {
\&         my $self = shift;
\&         my ($years) = @_;
\&         $PositiveInt\->assert_valid($years);
\&         $self\->_set_age($self\->age + $years);
\&      }
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Type::Tiny is tested with Moo 1.001000 and above.
.PP
Type::Tiny overloads \f(CW\*(C`&{}\*(C'\fR. Moo supports using objects that overload
\&\f(CW\*(C`&{}\*(C'\fR as \f(CW\*(C`isa\*(C'\fR constraints, so Type::Tiny objects can directly be used
in \f(CW\*(C`isa\*(C'\fR.
.PP
Moo doesn't support \f(CW\*(C`coerce => 1\*(C'\fR but requires a coderef as a coercion.
However, again it supports using objects that overload \f(CW\*(C`&{}\*(C'\fR, which
Type::Coercion does, allowing \f(CW\*(C`coerce => $Type\->coercion\*(C'\fR to work.
.PP
Type::Tiny hooks into Moo's HandleMoose interface to ensure that type
constraints get inflated to Moose type constraints if and when Moo inflates
your class to a full Moose class.
.SS "Optimization"
.IX Subsection "Optimization"
The usual advice for optimizing type constraints applies: use type constraints
which can be inlined whenever possible, and define coercions as strings rather
than coderefs.
.PP
Upgrading to Moo 1.002000 or above should provide a slight increase in speed
for type constraints, as it allows them to be inlined into accessors and
constructors.
.PP
If creating your own type constraints using \f(CW\*(C`Type::Tiny\->new\*(C'\fR, then
consider using Sub::Quote to quote the coderef; this allows you to take
advantage of inlining without having to write your own inlining routines.
.PP
See also Type::Tiny::Manual::Optimization.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For examples using Type::Tiny with Moo see the \s-1SYNOPSIS\s0 sections of
Type::Tiny and Type::Library, and the
Moo integration tests <https://github.com/tobyink/p5-type-tiny/tree/master/t/30-integration/Moo>
in the test suite.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1WITHOUT\s0 \s-1LIMITATION\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTIBILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
