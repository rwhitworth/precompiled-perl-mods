.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "DateTime::TimeZone::Local::VMS 3"
.TH DateTime::TimeZone::Local::VMS 3 "2015-06-22" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::TimeZone::Local::VMS \- Determine the local system's time zone on VMS
.SH "VERSION"
.IX Header "VERSION"
version 1.92
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $tz = DateTime::TimeZone\->new( name => \*(Aqlocal\*(Aq );
\&
\&  my $tz = DateTime::TimeZone::Local\->TimeZone();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for determining the local time zone on a
\&\s-1VMS\s0 platform.
.PP
\&\s-1NOTE:\s0 This is basically a stub pending an implementation by someone
who knows something about \s-1VMS\s0.
.SH "HOW THE TIME ZONE IS DETERMINED"
.IX Header "HOW THE TIME ZONE IS DETERMINED"
This class tries the following methods of determining the local time
zone:
.IP "\(bu" 4
\&\f(CW%ENV\fR
.Sp
We check the following environment variables:
.RS 4
.IP "\(bu" 8
\&\s-1TZ\s0
.IP "\(bu" 8
\&\s-1SYS$TIMEZONE_RULE\s0
.IP "\(bu" 8
\&\s-1SYS$TIMEZONE_NAME\s0
.IP "\(bu" 8
\&\s-1UCX$TZ\s0
.IP "\(bu" 8
\&\s-1TCPIP$TZ\s0
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Dave Rolsky.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
