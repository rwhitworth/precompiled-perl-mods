.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SQL::Dialects::Role 3"
.TH SQL::Dialects::Role 3 "2015-05-26" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Dialects::Role \- The role of being a SQL::Dialect
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package My::SQL::Dialect;
\&
\&    use SQL::Dialects::Role;
\&
\&    sub get_config {
\&        return <<CONFIG;
\&    [SECTION]
\&    item1
\&    item2
\&
\&    [ANOTHER SECTION]
\&    item1
\&    item2
\&    CONFIG
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This adds the role of being a SQL::Dialect to your class.
.SS "Requirements"
.IX Subsection "Requirements"
You must implement...
.PP
\fIget_config\fR
.IX Subsection "get_config"
.PP
.Vb 1
\&    my $config = $class\->get_config;
.Ve
.PP
Returns information about the dialect in an INI-like format.
.SS "Implements"
.IX Subsection "Implements"
The role implements...
.PP
\fIget_config_as_hash\fR
.IX Subsection "get_config_as_hash"
.PP
.Vb 1
\&    my $config = $class\->get_config_as_hash;
.Ve
.PP
Returns the data represented in \fIget_config()\fR as a hash ref.
.PP
Items will be upper-cased, sections will be lower-cased.
.PP
The example in the \s-1SYNOPSIS\s0 would come back as...
.PP
.Vb 10
\&    {
\&        section => {
\&            ITEM1       => 1,
\&            ITEM2       => 2,
\&        },
\&        another_section => {
\&            ITEM1       => 1,
\&            ITEM2       => 2,
\&        }
\&   }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"\fIdialect()\fR\*(R" in SQL::Parser
